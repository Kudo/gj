#!/usr/bin/env python
# -*- encoding: utf8 -*-

'''
gj: an interactive tool to find out symbols.
'''

import sys
import optparse
import os

import gj_util


__author__ = 'fcamel'


#------------------------------------------------------------------------------
# Configuration
#------------------------------------------------------------------------------
def _gen_vim_command(filename, line, pattern):
    return 'vim %s -c/%s +%s' % (filename, pattern, line)

# Use vim by default.
_gen_edit_command = _gen_vim_command

if 'EDITOR'in os.environ:
    editor = os.environ['EDITOR']
    # Add your _gen_edit_command if you don't use vim.
    # E.g., emacs

    # For a general editor, don't know how to jump to the line and highglight
    # the pattern. Only open the file.
    if editor != 'vi' and editor != 'vim':
        _gen_edit_command = lambda filename, p, l: '%s %s' % (editor, filename)

#------------------------------------------------------------------------------
# main
#------------------------------------------------------------------------------
def main():
    '''\
    %prog [options] <pattern> [<pattern> ...]

    Grep pattern in source codes using id-utils.
    Before starting, type 'mkid' in your source root first.

    Example of usages:
        $ gj MyClient         # find any snippet which contains MyClient
        $ gj MyClient class   # find the definition.
    '''
    gj_util.check_install()

    parser = optparse.OptionParser(usage=main.__doc__)
    parser.add_option('-d', '--declaration', dest='declaration',
                      type=int, default=0,
                      help=('Find possible declarations or definitions. '
                            'Higher level finds less result (default=0).'))
    parser.add_option('-b', '--batch', dest='batch',
                      action='store_true', default=False,
                      help='Run in batch mode (i.e., no interaction).')
    parser.add_option('-i', '--index', dest='index',
                      action='store_true', default=False,
                      help='Build index.')
    parser.add_option('-s', '--symbol', dest='symbol',
                      action='store_true', default=False,
                      help='Find symbols given sub-string (case-insensitive match).')
    options, args = parser.parse_args()

    if options.index:
        result = gj_util.build_index()
        return 0 if result else 1

    if len(args) < 1:
        parser.print_help()
        return 2

    if not os.path.exists('ID'):
        print 'Database file "ID" is not found. Have you run "gj -i"?'
        return 3

    patterns = args

    # Find matched symbols
    if options.symbol:
        lines = gj_util.find_symbols(patterns[0])
        for line in lines:
            print line.encode('utf8')
        return 0

    # Find the initial matched set.
    gj_util.get_list.original_patterns = patterns
    if options.declaration > 0:
        matches = gj_util.find_declaration_or_definition(patterns[0],
                                                         options.declaration)
    else:
        matches = gj_util.get_list()

    # Run in batch mode?
    if options.batch:
        for m in matches:
            print unicode(m).encode('utf8')
        return 0

    # Enter interactive mode.
    # Filter the rest or view the selected file.
    n = 0
    while True:
        n, matches, patterns = gj_util.filter_until_select(matches, patterns, n)
        if n <= 0:
            if n < 0:
                return 1
            return 0

        # Edit the chosen one.
        m = matches[n - 1]

        ret = os.system(_gen_edit_command(m.filename, m.line_num, patterns[0]))
        if ret != 0:
            return 4

    return 0


if __name__ == '__main__':
    sys.exit(main())
